// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dclauth/account.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/x/auth/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Account struct {
	*types.BaseAccount `protobuf:"bytes,1,opt,name=base_account,json=baseAccount,proto3,embedded=base_account" json:"base_account,omitempty"`
	// NOTE. we do not user AccountRoles casting here to preserve repeated form
	//       so protobuf takes care about repeated items in generated code,
	//       (but that might be not the final solution)
	Roles     []AccountRole `protobuf:"bytes,2,rep,name=roles,proto3,casttype=AccountRole" json:"roles,omitempty"`
	Approvals []*Grant      `protobuf:"bytes,3,rep,name=approvals,proto3" json:"approvals,omitempty"`
	VendorID  int32         `protobuf:"varint,4,opt,name=vendorID,proto3" json:"vendorID,omitempty"`
}

func (m *Account) Reset()      { *m = Account{} }
func (*Account) ProtoMessage() {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2d3e1e8208016c, []int{0}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Account)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.Account")
}

func init() { proto.RegisterFile("dclauth/account.proto", fileDescriptor_3a2d3e1e8208016c) }

var fileDescriptor_3a2d3e1e8208016c = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xb1, 0x4b, 0xfb, 0x40,
	0x14, 0xc7, 0x73, 0xbf, 0xb6, 0x3f, 0xdb, 0x44, 0x10, 0xa2, 0x42, 0xe8, 0x90, 0x04, 0x41, 0xc8,
	0xd2, 0x3b, 0x5a, 0x27, 0xdd, 0x0c, 0x82, 0x76, 0xcd, 0x22, 0xb8, 0xc8, 0xdd, 0xe5, 0x48, 0x03,
	0xd7, 0x5e, 0xb8, 0xbb, 0x14, 0xf5, 0x2f, 0x70, 0x74, 0x74, 0xec, 0x9f, 0xe3, 0xd8, 0xd1, 0xa9,
	0x48, 0xfb, 0x5f, 0x74, 0x92, 0xe6, 0x12, 0xeb, 0xea, 0x76, 0xef, 0x3d, 0xde, 0xe7, 0x7d, 0xee,
	0x6b, 0x9f, 0xa6, 0x94, 0xe3, 0x52, 0x4f, 0x10, 0xa6, 0x54, 0x94, 0x33, 0x0d, 0x0b, 0x29, 0xb4,
	0x70, 0x47, 0x2f, 0x79, 0x46, 0x18, 0xc3, 0x9c, 0xe7, 0x78, 0x46, 0x19, 0x4c, 0x73, 0xa5, 0x65,
	0x4e, 0x4a, 0xcd, 0x52, 0x2a, 0xa6, 0x85, 0xe9, 0x72, 0x96, 0x66, 0x4c, 0xc2, 0x9a, 0xd0, 0x3f,
	0xc9, 0x44, 0x26, 0xaa, 0x75, 0xb4, 0x7b, 0x19, 0x52, 0xdf, 0xa7, 0x42, 0x4d, 0x85, 0x42, 0xd5,
	0x91, 0xf9, 0x90, 0x30, 0x8d, 0x87, 0x55, 0x51, 0xcf, 0x8f, 0x1b, 0x81, 0x4c, 0xe2, 0xe6, 0xfc,
	0xd9, 0x16, 0xd8, 0x07, 0xd7, 0x46, 0xc8, 0x1d, 0xdb, 0x87, 0x04, 0x2b, 0xf6, 0x58, 0x0b, 0x7a,
	0x20, 0x04, 0x91, 0x33, 0x0a, 0xa1, 0xe1, 0xc2, 0x0a, 0x55, 0x73, 0x61, 0x8c, 0x15, 0xab, 0xf7,
	0xe2, 0xf6, 0x72, 0x15, 0x80, 0xc4, 0x21, 0xfb, 0x96, 0x7b, 0x6e, 0x77, 0xa4, 0xe0, 0x4c, 0x79,
	0xff, 0xc2, 0x56, 0xd4, 0x8b, 0x8f, 0xb6, 0xab, 0xc0, 0xa9, 0x67, 0x89, 0xe0, 0x2c, 0x31, 0x53,
	0xf7, 0xde, 0xee, 0xe1, 0xa2, 0x90, 0x62, 0x8e, 0xb9, 0xf2, 0x5a, 0x61, 0x2b, 0x72, 0x46, 0x97,
	0xf0, 0xef, 0x81, 0xc0, 0xdb, 0xdd, 0x8f, 0x92, 0x3d, 0xcb, 0xed, 0xdb, 0xdd, 0x39, 0x9b, 0xa5,
	0x42, 0x8e, 0x6f, 0xbc, 0x76, 0x08, 0xa2, 0x4e, 0xf2, 0x53, 0x5f, 0x75, 0x5f, 0x17, 0x81, 0xf5,
	0xbe, 0x08, 0xac, 0x98, 0x7c, 0xac, 0x7d, 0xb0, 0x5c, 0xfb, 0xe0, 0x6b, 0xed, 0x83, 0xb7, 0x8d,
	0x6f, 0x2d, 0x37, 0xbe, 0xf5, 0xb9, 0xf1, 0xad, 0x87, 0xbb, 0x2c, 0xd7, 0x93, 0x92, 0x40, 0x2a,
	0xa6, 0xc8, 0xf8, 0x0c, 0x1a, 0x21, 0xf4, 0x4b, 0x68, 0xb0, 0x37, 0x1a, 0x18, 0x25, 0xf4, 0x84,
	0x9a, 0x98, 0xf5, 0x73, 0xc1, 0x14, 0xf9, 0x5f, 0xe5, 0x7c, 0xf1, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0xcd, 0x92, 0x97, 0x92, 0xff, 0x01, 0x00, 0x00,
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VendorID != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.VendorID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Approvals) > 0 {
		for iNdEx := len(m.Approvals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Approvals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Roles[iNdEx])
			copy(dAtA[i:], m.Roles[iNdEx])
			i = encodeVarintAccount(dAtA, i, uint64(len(m.Roles[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BaseAccount != nil {
		{
			size, err := m.BaseAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseAccount != nil {
		l = m.BaseAccount.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	if len(m.Approvals) > 0 {
		for _, e := range m.Approvals {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	if m.VendorID != 0 {
		n += 1 + sovAccount(uint64(m.VendorID))
	}
	return n
}

func sovAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccount(x uint64) (n int) {
	return sovAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseAccount == nil {
				m.BaseAccount = &types.BaseAccount{}
			}
			if err := m.BaseAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, AccountRole(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approvals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approvals = append(m.Approvals, &Grant{})
			if err := m.Approvals[len(m.Approvals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorID", wireType)
			}
			m.VendorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccount = fmt.Errorf("proto: unexpected end of group")
)
